# throw

Minimal lib to wrap error with stacktrace. Works with std errors, slog packages.

example

    func foo() (error) {
        return throw.Wrap1(os.Open("non-existing-file"))
    }

    func main() {
        slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stdout, nil)))
        err := foo()
        slog.Error("something is wrong", throw.SlogAttr(foo()))
        slog.Info(fmt.Sprintf("this should print true: %v", errors.Is(err, os.ErrNotExist)))
    }

output 

    {
      "time": "2024-09-18T02:06:16.67056337+09:00",
      "level": "ERROR",
      "msg": "something is wrong",
      "throw": {
        "error": "open non-existing-file: no such file or directory",
        "stack": [
          "main.foo:/home/rok/src/github.com/xtdlib/throw/example/simple/main.go:13",
          "main.main:/home/rok/src/github.com/xtdlib/throw/example/simple/main.go:19"
        ]
      }
    }
    {
      "time": "2024-09-18T02:06:16.67070797+09:00",
      "level": "INFO",
      "msg": "this should print true: true"
    }
